name: CI

on:
  push:
    branches: [master]

  pull_request:
    branches: [master]

jobs:
  start:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
  
      - name: Run sample script
        run: echo CI started

#  lint:
#    name: Perform lint check
#    needs: [start]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - name: Cache Gradle
#        uses: actions/cache@v4
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#          restore-keys: ${{ runner.os }}-gradle-
#
#      - run: |
#          download_url="https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz"
#          wget -O $RUNNER_TEMP/java_package.tar.gz $download_url
#      - uses: actions/setup-java@v4
#        with:
#          distribution: 'jdkfile'
#          jdkFile: ${{ runner.temp }}/java_package.tar.gz
#          java-version: '17'
#          architecture: x64
#
#      - name: Make Gradle executable
#        run: chmod +x ./gradlew
#
#      - name: Run lint
#        run: ./gradlew lintDebug
#
#      - name: Upload html test report
#        uses: actions/upload-artifact@v4
#        with:
#          name: lint.html
#          path: app/build/reports/lint-results-debug.html
#
#  unit-test:
#    name: Perform Unit Testing
#    needs: [lint]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - run: |
#          download_url="https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz"
#          wget -O $RUNNER_TEMP/java_package.tar.gz $download_url
#      - uses: actions/setup-java@v4
#        with:
#          distribution: 'jdkfile'
#          jdkFile: ${{ runner.temp }}/java_package.tar.gz
#          java-version: '17'
#          architecture: x64
#
#      - name: Run tests
#        run: ./gradlew test
#
#      - name: Upload test report
#        uses: actions/upload-artifact@v4
#        with:
#          name: unit_test_report
#          path: app/build/reports/tests/testDebugUnitTest/
#
#  instrumentation-test:
#    name: Perform Instrumentation Testing
#    needs: [unit-test]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v4
#
#      - run: |
#          download_url="https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz"
#          wget -O $RUNNER_TEMP/java_package.tar.gz $download_url
#      - uses: actions/setup-java@v4
#        with:
#          distribution: 'jdkfile'
#          jdkFile: ${{ runner.temp }}/java_package.tar.gz
#          java-version: '17'
#          architecture: x64
#
#      - name: Enable KVM
#        run: |
#          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
#          sudo udevadm control --reload-rules
#          sudo udevadm trigger --name-match=kvm
#
#      - name: Run espresso tests
#        uses: reactivecircus/android-emulator-runner@v2 # 3rd party tool
#        with:
#          api-level: 34
#          arch: x86_64
#          target: google_apis
#          profile: Nexus 7
#          disable-animations: true
#          script: ./gradlew connectedCheck
#
#      - name: Upload Instrumentation Test report
#        uses: actions/upload-artifact@v4
#        with:
#          name: instrumentation_test_report
#          path: app/build/reports/androidTests/connected/

  static-code-analysis:
    name: Perform static code analysis
    needs: [start]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - run: |
          download_url="https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz"
          wget -O $RUNNER_TEMP/java_package.tar.gz $download_url
      - uses: actions/setup-java@v4
        with:
          distribution: 'jdkfile'
          jdkFile: ${{ runner.temp }}/java_package.tar.gz
          java-version: '17'
          architecture: x64
  
      - name: SonarCloud Scan # sonarcloud properties in gradle.properties file
        run: ./gradlew app:sonarqube --settings-file=./settings.gradle -Dsonar.login=${{ secrets.SONAR_TOKEN }} --stacktrace
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  debug-apk:
    name: Generate Debug APK
    needs: [static-code-analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - run: |
          download_url="https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz"
          wget -O $RUNNER_TEMP/java_package.tar.gz $download_url
      - uses: actions/setup-java@v4
        with:
          distribution: 'jdkfile'
          jdkFile: ${{ runner.temp }}/java_package.tar.gz
          java-version: '17'
          architecture: x64
  
      - name: Build debug APK
        run: ./gradlew assembleDebug --stacktrace
  
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: cocktails-app.apk
          path: app/build/outputs/apk/debug/app-debug.apk
